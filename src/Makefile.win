# J-Ben Makefile for Windows
# WARNING: Not for the faint of heart.  Really, just download a precompiled
# binary if at all possible.
#
# Windows builds expect MinGW WITH MSys,
# one of the gcc 4 compilers (for wstrings),
# plus 7-Zip, NSIS and GTK binaries in your path for "make install".
# PKG_CONFIG_PATH must also be set appropriately.
#
# === NOTES FOR SUCCESSFUL BUILDING ===
#
# LAST SUCCESSFUL BUILD used:
# MinGW
# * MinGW-5.1.4.exe (automated installer)
# * update: gcc-4.3.0-20080502-mingw32-alpha-bin.7z
#   (updated GCC with wstrings and TR1 hash maps)
# MSys
# * MSYS-1.0.10.exe
# * Updates: installed all known MSYS updates, from oldest to newest, being
#   careful not to overwrite newer files
# GTKmm: gtkmm-win32-devel-2.14.1-3.exe (includes gtk dev environment as well)
# Boost: boost_1_37_0.7z
# * The Boost::Regex library must be built.  See the note below.
# <DISABLED> libxml2: libxml2-2.7.2.win32.zip
# libiconv: iconv-1.9.2-1-bin.zip and iconv-1.9.2-1-lib.zip
#           (Extract to the same folder)
# zlib: zlib123-dll.zip
#       Note: Ignore the part of the USAGE.txt file saying to rename the
#             library.  In this makefile, it shouldn't be necessary.
#
# Sources for these files:
# http://mingw.sourceforge.net/: MinGW homepage (MSys is here, too)
# http://live.gnome.org/gtkmm/MSWindows: gtkmm runtime and development binaries
# http://www.boost.org/: Boost libraries
# <N/A> http://www.zlatkovic.com/libxml.en.html: libxml2 for Windows
# http://gnuwin32.sourceforge.net/packages/libiconv.htm: libiconv for Windows
# http://www.zlib.net/: zlib library; look for "zlib compiled DLL"
#
# Building Boost::Regex:
# * If you have TMP or TEMP environmental variables with spaces in them
#   (especially if they're for your specific user account), change them to
#   something without spaces or you will encounter mysterious errors. :)
# * Get a bjam binary from http://sourceforge.net/projects/boost/
# * Add bjam.exe to your path
# * Open MSys and cd to the boost root folder
# * Run: bjam --build-dir=<build_dir> --toolset=gcc --build-type=complete stage
#   (replacing <build_dir> with an output directory, obviously.)
#   This procedure will take a LONG time, maybe over an hour.
# For more complete documentation, see the Boost "Getting Started on Windows"
# page in the official Boost documentation.


# NOTES TO SELF:
# On library/GUI split, these things will (eventually) need to be taken care of:
# 1. libxml2: It seems like having a separate libxml2 package conflicts with the
#             one supplied by GTKmm.  For now, we'll just use GTKmm's stuff.
# 2. gettext: handled by GTKmm's i18n package, but will need to be handled
#             manually when the core is separated into a dll.


# === MAKEFILE BEGINS HERE ===

### User-editable options ###
# BUILD: either release, debug, or profile
BUILD = release
# JBEN_VERSION: Used for labeling release packages
JBEN_VERSION = `cat version.h | grep VERSION_STR | sed -e 's/^[^"]*"\([^"]*\)"/\1/'`
# PLATFORM: Used as a subdirectory name.
PLATFORM = windows

#===CHANGE THESE VARIABLES===
# Compilers
CXX = g++
CC = gcc
# Dev environment
mingwbase = C:/MinGW

# Library base directories
gtkmmbase = C:/devel/GTKmm-2.14.1
zlibbase = C:/devel/zlib123-dll
iconvbase = C:/devel/libiconv-1.9.2-1
boostbase = C:/devel/boost_1_37_0
#xmlbase = C:/devel/libxml2-2.7.2.win32

# Direct lib paths (for non-gcc-style names)
#libxml = $(xmlbase)/lib/libxml2.lib
libzlib = $(zlibbase)/lib/zdll.lib
libboost_regex = $(boostbase)/stage/lib/libboost_regex-mgw43-mt-1_37.lib
#The below should be a direct path to the boost::regex library
#The below variables point towards the path to a configured,
#redistributable GTK/GTKmm environment.  It's used by the Windows
#"make install" target.  If you need help setting this up, contact the
#author directly.
gtkredist = C:/gtk-redist

#===LEAVE THESE ALONE===
SharedCXXFLAGS = -I$(zlibbase)/include -I$(iconvbase)/include -I$(boostbase) -I$(gtkmmbase)/include `pkg-config --cflags libxml-2.0 gtkmm-2.4`
SharedCPPFLAGS = -D__WIN32__
libs = $(libzlib) -L$(iconvbase)/lib -liconv.dll $(libboost_regex) `pkg-config --libs libxml-2.0 gtkmm-2.4` -mwindows
##########################################
# DO NOT EDIT BEYOND THIS POINT!         #
# (Unless you know what you're doing ;)) #
##########################################

# make options
SHELL = /bin/sh
INSTALL = install
INSTALL_PROGRAM = $(INSTALL)
INSTALL_DATA    = $(INSTALL) -m 644
# From GNU Make manual, section 14.4: Variables for Installation Directories
prefix = /usr/local
exec_prefix = $(prefix)
bindir = $(exec_prefix)/bin
datarootdir = $(prefix)/share
datadir = $(datarootdir)
docdir = $(datarootdir)/doc/jben
# I don't have a man page written yet, but I'll define the vars anyway.
mandir = $(datarootdir)/man
man1dir = $(mandir)/man1

# build dirs
build_depdir = ../dep/$(PLATFORM)/$(BUILD)
build_objdir = ../obj/$(PLATFORM)/$(BUILD)
build_bindir = ../bin/$(PLATFORM)/$(BUILD)

# C++ options
ifeq ($(BUILD),release)
	CXXFLAGS = -Wall -s -O2
	CPPFLAGS = -DNDEBUG #Added, used by assert
endif
ifeq ($(BUILD),debug)
	CXXFLAGS = -Wall -g
	CPPFLAGS = -DDEBUG
endif
#Profiling mode: DEBUG-style CXXFLAGS plus -pg, with RELEASE-style CPPFLAGS
ifeq ($(BUILD),profile)
	CXXFLAGS = -Wall -g -pg
	CPPFLAGS = -DNDEBUG #Added, used by assert
endif

sources = $(shell ls -t *.cpp) # Compile most recently edited files first.
objects = $(sources:%.cpp=$(build_objdir)/%.o) $(build_objdir)/jben-rc.o
target = jben.exe

### Targets ###

all: $(build_bindir)/$(target) kpengine
	@echo J-Ben was built successfully.

.PHONY : kpengine clean cleandep cleanall installprep install uninstall doc

$(build_bindir)/$(target) : $(objects)
	mkdir -p $(build_bindir)
	$(CXX) $(CXXFLAGS) $(SharedCXXFLAGS) -o $@ $(objects) $(libs)

kpengine:
	cd kpengine && $(MAKE) BUILD=$(BUILD) -f Makefile.win && cd ..

clean:
	cd kpengine && $(MAKE) clean && cd ..
	rm -rfv ../bin ../obj ../jben.res

cleandep:
	rm -rfv ../dep

cleanall : clean cleandep

$(build_objdir)/jben-rc.o:
	mkdir -p $(build_objdir)
	windres.exe -o $@ jben.rc

$(build_objdir)/%.o : %.cpp
	mkdir -p $(build_objdir)
	$(CXX) -c $(CPPFLAGS) $(SharedCPPFLAGS) $(CXXFLAGS) $(SharedCXXFLAGS) -o \
		$@ $(@F:%.o=%.cpp)

# Object dependency tracking
include $(sources:%.cpp=$(build_depdir)/%.d)
$(build_depdir)/%.d : %.cpp
	@echo Recreating $@...
	@mkdir -p $(build_depdir)
	@$(CXX) -MM $(CPPFLAGS) $< > $@.mktmp
ifeq ($(buildenv),windows)
	@sed "s,\($*\)\.o[ :]*,$(build_objdir)/\1.o $@ : ,g" < $@.mktmp > $@
else
	@sed 's,\($*\)\.o[ :]*,$(build_objdir)/\1.o $@ : ,g' < $@.mktmp > $@
endif
	@rm $@.mktmp

installprep:
#	Make a phony output folder with all redist files
	mkdir -p ../J-Ben
#	Copy GTK files
	cp -R $(gtkredist)/bin ../J-Ben
	cp -R $(gtkredist)/etc ../J-Ben
	cp -R $(gtkredist)/lib ../J-Ben
	cp -R $(gtkredist)/share ../J-Ben
#	Copy GNU iconv files
	cp -R $(iconvbase)/bin/libiconv2.dll ../J-Ben/bin
#	Copy J-Ben binaries and DLLs not in GTK redist folder
	cp "$(mingwbase)/bin/mingwm10.dll" ../J-Ben/bin
	cp "$(build_bindir)/$(target)" ../J-Ben/bin
	cp "$(build_bindir)/kpengine/jben_kpengine.exe" ../J-Ben/bin
#	Strip J-Ben executables
	strip ../J-Ben/bin/$(target)
	strip ../J-Ben/bin/jben_kpengine.exe
#	Copy remaining J-Ben files (data, readmes, licenses, docs, etc.)
	cp ../CHANGELOG ../COPYING ../CREDITS ../DEDICATION ../README ../TODO ../J-Ben
	cp -R ../license ../J-Ben
	mkdir -p ../J-Ben/kpengine_data ../J-Ben/dicts ../J-Ben/sods
	cp kpengine/*.unistrok ../J-Ben/kpengine_data
	rm -rf ../J-Ben/doc
	cp -R ../doc/html ../J-Ben/doc || true
	cp ../dicts/* ../J-Ben/dicts
	cp ../sods/README ../J-Ben/sods
	@echo J-Ben distribution created in ..\\J-Ben.

install : installprep
#	Zip the output folder into 7z and zip archives
	mkdir -p ../archives/$(JBEN_VERSION)
	rm ../archives/$(JBEN_VERSION)/jben-$(JBEN_VERSION)-win-binary.zip || true
	rm ../archives/$(JBEN_VERSION)/jben-$(JBEN_VERSION)-win-binary.7z || true
	7z a -tzip ../archives/$(JBEN_VERSION)/jben-$(JBEN_VERSION)-win-binary.zip \
		../J-Ben
	7z a -t7z ../archives/$(JBEN_VERSION)/jben-$(JBEN_VERSION)-win-binary.7z \
		../J-Ben
#####
# Msys has issues with programs requiring "/" switches.  So, makensis with a /D switch won't fly until I can find a workaround.
#####
	@echo To create an installer, open a normal command prompt, navigate to this
	@echo directory, and type the following:
	@echo makensis /Dversion=$(JBEN_VERSION) installer.nsi
	@echo \(Afterwards, delete ..\J-Ben.\)
##	Run NSIS script
#	makensis /Dversion=$(JBEN_VERSION) installer.nsi
##	Remove the output folder
#	rm -rf ../J-Ben

uninstall:
	@echo "make uninstall" is not supported on Windows.

doc:
	@echo "make doc" is not supported on Windows.
