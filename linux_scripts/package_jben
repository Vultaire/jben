#!/usr/bin/env python

# J-Ben source packaging script.
# Run this script from BELOW the J-Ben root!
# Pass the current version number as an argument.
# (If none is specified, a "snapshot" with date/time will be made.)

from subprocess import PIPE, Popen as P
from os import waitpid
from sys import argv, exit

baseName = "jben"
# Get version number.  If not specified, assume we're just doing a snapshot.
if(len(argv)<2):
	print "No version specified.  Using today's date as a snapshot name."
	p = P("jben/linux_scripts/mydate", shell=True, stdout=PIPE)
	waitpid(p.pid,0)
	version = p.stdout.readline().strip()
else:
	version = argv[1]

packageName = baseName + "-" + version
sourcePackageName = packageName + "-source"

print "Packaging " + baseName + " version " + version + "..."

# Define the files to save
linuxfiles = " jben/src/*.xpm jben/linux_scripts"
winfiles = " jben/src/jben.ico jben/src/jben.rc jben/src/installer.nsi"
otherfiles = " jben/CHANGELOG jben/COPYING jben/CREDITS jben/DEDICATION " \
    + "jben/README jben/TODO jben/dicts/README jben/sods/README " \
    + "jben/doc/*.xml jben/license jben/src/jben_icon.xcf"
kpenginefiles = " jben/src/kpengine"
sourcefiles = "jben/src/Makefile jben/src/*.cpp jben/src/*.h " + otherfiles + kpenginefiles + linuxfiles + winfiles

# Make the .tar.bz2 archive
p = P("tar -cjf " + sourcePackageName + ".tar.bz2 " + sourcefiles, \
	shell=True)
(garbage,result)=waitpid(p.pid,0)
if(result!=0):
	print 'Error: could not create source archive "' + sourcePackageName + '.tar.bz2".'
	exit(-1)
print 'Source archive "' + sourcePackageName + '.tar.bz2" created.'

# Make the .zip archive
p = P("zip -rq " + sourcePackageName + ".zip " + sourcefiles, \
	shell=True)
(garbage,result)=waitpid(p.pid,0)
if(result!=0):
	print 'Error: could not create source archive "' + sourcePackageName + '.zip".'
	exit(-1)
print 'Source archive "' + sourcePackageName + '.zip" created.'
print 'Finished creating all archives for ' + packageName + '!'

archiveDir = 'jben/archives/' + version
print 'Creating directory "' + archiveDir + '...'
command = 'mkdir -p ' + archiveDir
p = P(command, shell=True)
(garbage,result)=waitpid(p.pid,0)
if(result!=0):
	print 'Error: could not create archive directory.'
	exit(-1)

print 'Moving files...'
command = 'mv ' + packageName + '* ' + archiveDir
p = P(command, shell=True)
(garbage,result)=waitpid(p.pid,0)

print 'Archival complete.'
