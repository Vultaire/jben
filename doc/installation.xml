<chapter>
	<title>Installation</title>
	<sect1>
		<title>Building J-Ben</title>
		<sect2>
			<title>Dependencies</title>

			<para>
				J-Ben is dependent on the following:
				<itemizedlist>
					<listitem>GTK+/GTKmm: J-Ben is now developed using GTK on
					all platforms.  Any recent version should work, but here's a
					listing of some of the libraries in use on my Linux system:
					<itemizedlist>
						<listitem>GTK+: 2.12.9</listitem>
						<listitem>GLib: 2.16.1</listitem>
						<listitem>Cairo: 1.4.10</listitem>
						<listitem>libsigc++: 2.0.18</listitem>
						<listitem>GTKmm/GLibmm/etc.: roughly matching versions</listitem>
					</itemizedlist>
					</listitem>
					<listitem>The Boost Libraries: J-Ben should work with boost
					1.34.1 or later.</listitem>
				</itemizedlist>
			</para>
		</sect2>
		<sect2>
			<title>Linux Users</title>

			<para>Ensure you have the development packages for libboost and
			wxWidgets installed. Then, just "make". There is no "make install"
			at this time, sorry. It will be added later.</para>
		</sect2>
		<sect2>
			<title>Windows Users</title>

			<para>NOTE: These instructions are only for people building J-Ben
			from source code.  If you just want to use J-Ben, proceed to
			<link linkend="jben_install">Installing J-Ben</link>.</para>

			<para>Windows builds are more challenging in large because setting
			up the dependent libraries is more of a chore.  This is especially
			true of GTK+ and GTKmm, for which at the time of writing no official
			all-in-one development distributions for Windows exist, and the ones
			which are readily available tend to be very out of date.  As such,
			I strongly recommend -against- building from source unless you have
			a really good reason to do so.</para>

			<para>That being said, the Windows development environment supported
			is MinGW with MSys.  The Makefile provided works both under Linux
			and MSys.  (I personally do not plan to support other build
			environments at this time.)</para>

			<para>OUT OF DATE</para>

			<para>
				If you want to give it a try, do the following:
				<itemizedlist>
					<listitem>Ensure mingw's bin folder is in your
					path.</listitem>
					<listitem>Install the coreutils and sed packages from the
					gnuwin32 project. This means the binaries and the
					dependencies. You'll probably come across duplicate DLLs
					while unzipping these packages. This should be okay, just
					keep the newer copy of any duplicate DLLs.</listitem>
					<listitem>Make sure the coreutils/sed binaries are in your
					path.</listitem>
					<listitem>Change the 4 variables in the "WINDOWS-SPECIFIC"
					section of the makefile as needed.</listitem>
					<listitem>
						Build using the following command:
						<informalexample>
							<programlisting>mingw32-make PLATFORM=windows</programlisting>
						</informalexample>
					</listitem>
				</itemizedlist>
			</para>
		</sect2>
		<sect2>
			<title>Expert: Canadian Cross Linux->Windows builds</title>
			<note>Most people can safely skip this section.</note>
			<para>To attempt a "canadian cross" build, run:
			<informalexample>
				<programlisting>make CANUCK=1 PLATFORM=windows BUILD=&lt;release|debug|profile> \
CC=&lt;cross-compiling gcc> CXX=&lt;cross-compiling g++></programlisting>
			</informalexample>
			(This has not yet been tested; I'm working on it!)</para>
		</sect2>
	</sect1>

	<sect1 id="jben_install">
		<title>Installing J-Ben</title>

		<para>Currently there is no proper installer mechanism for the program;
		I've been mostly focused on the program itself since it is still quite
		lacking in several areas. I will address installation at a future
		date.</para>

		<para>For Windows users, adding a start menu shortcut should be a
		trivial affair, if desired. Just do it yourself.</para>

		<para>For Linux users, you could add the program's directory to your
		path via your ~/.bashrc file, or you could make a script like the
		following:</para>

		<informalexample><programlisting>#!/bin/sh
cd &lt;path_to_jben>
./jben</programlisting></informalexample>

		<para>Put that in /usr/bin or similar, do a chmod +x on it and that'll
		make things simpler.</para>
	</sect1>

	<sect1 id="kksod_install">
		<title>Optional: Installing Stroke Order Diagrams</title>

		<para>
			The kanji dictionary can be supplemented with kanji stroke order
			diagrams. J-Ben is licensed to use the 3rd public release of
			the
			<ulink url="http://www.kanjicafe.com/using_soder.htm">SODER
			project</ulink>'s stroke order diagrams, however to save on download
			size these are not included in the main J-Ben packages. They are
			available from the<ulink
			url="http://www.vultaire.net/software/jben/download.php">J-Ben
			download page</ulink> along with the rest of the J-Ben packages.
			Download one of these packages and decompress it into the "sods"
			directory of J-Ben. If there is no "sods" directory, create one.
			Then, in the <link linkend="cfs">configuration tab</link>, enable
			either regular or animated stroke order diagrams, and you should be
			set. (As a last note, packages directly from KanjiCafe can also be
			used, but they need marked as utf8-hex.)
		</para>
 	</sect1>
</chapter>
